#!/bin/bash
. /var/openpanel/api/sh/module.sh

Module.getconfig() {
  cat << _EOF_
  <openpanel.module>
    <dict id="Openswan" type="class">
      <dict id="openswan" type="object">
        <string id="uuid">257b12a2-9653-4f29-be9d-a192cbd594cb</string>
      </dict>
    </dict>
    <dict id="OpenCORE:Result">
      <integer id="error">0</integer>
      <string id="message">OK</string>
    </dict>
  </openpanel.module>
_EOF_
  exitquiet
}

Module.create() {
    exitok
}

Openswan:Connection.create() {
    Openswan:Connection.update
}

Openswan:Connection.delete() {
    conn_name=$(coreval Openswan:connection id)
    IPTABLESDIR=/etc/openpanel/iptables.d

    authd runscript op-ipsec ${conn_name} down

    authd deletefile /etc/ipsec.d/${conn_name}.op.conf
    authd deletefile /etc/ipsec.d/${conn_name}.op.secret
    authd deletefile ${IPTABLESDIR}/open-ipsec.${conn_name}.inc

    authd runscript iptables-update
}

getval() {
    val=${1}
    uuid=${2}

    if [ -z ${uuid} ]; then
        echo -n `coreval Openswan:Connection ${val}`
    else
        echo -n `coreval Openswan Openswan:Connection ${uuid} ${val}`
    fi
}

Openswan:Connection.update() {
    uuid=$1

    conn_name=$(getval id ${uuid})

    auto=$(getval conn_enabled)
    if [ "${auto}" = "true" ]; then auto="start"; else auto="ignore"; fi
    default_left=$(coreval Openswan left)
    left=$(getval left ${uuid})
    if [ -z ${left} ]; then left=${default_left}; fi

    default_leftnexthop=$(coreval Openswan leftnexthop)
    leftnexthop=$(getval leftnexthop ${uuid})
    if [ -z ${leftnexthop} ]; then leftnexthop=${default_leftnexthop}; fi

    default_leftsubnet=$(coreval Openswan leftsubnet)
    leftsubnet=$(getval leftsubnet ${uuid})
    if [ -z ${leftsubnet} ]; then leftsubnet=${default_leftsubnet}; fi

    right=$(getval id ${uuid})
    rightnexthop=$(getval rightnexthop ${uuid})
    rightsubnet=$(getval rightsubnet ${uuid})

    ike_alg=$(getval ike_alg ${uuid})
    if [ "${ike_alg}" = "none" ]; then ike_alg=""; fi
    phase2alg=$(getval phase2alg ${uuid})
    if [ "${phase2alg}" = "none" ]; then phase2alg=""; fi

    right_psk=$(getval right_psk ${uuid})

    OUTFILE=${conn_name}
    cat > ${OUTFILE}.op.conf << _EOF_
###
# This file is automatically generated by OpenPanel. Manual changes will be
# overwritten
###
conn ${conn_name}
    type=tunnel
    auto=${auto}
    auth=esp
    pfs=yes
    authby=secret
    keyingtries=%forever 
    left=${left}
    leftsourceip=${left}
    leftnexthop=${leftnexthop}
    leftsubnet=${leftsubnet}
    right=${right}
    rightnexthop=${rightnexthop}
    rightsubnet=${rightsubnet}
    rightid=${right}
    keyexchange=ike 
    ike=${ike_alg}
    phase2alg=${phase2alg}
_EOF_

    cat > ${OUTFILE}.op.secret << _EOF_
###
# This file is automatically generated by OpenPanel. Manual changes will be
# overwritten
###
${left} ${right} : PSK "${right_psk}"
_EOF_

    IPTABLESDIR=/etc/openpanel/iptables.d
    echo  '$IPTABLES -A openpanel -p esp -s '${right}' -j openpanel-allow' > open-ipsec.${right}.inc
    echo  '$IPTABLES -A openpanel -p udp -s '${right}' --dport 500 -j openpanel-allow' >> open-ipsec.${right}.inc
    echo  '$IPTABLES -A openpanel -p udp -s '${right}' --dport 4500 -j openpanel-allow' >> open-ipsec.${right}.inc

    authd installfile ${OUTFILE}.op.conf /etc/ipsec.d/
    authd installfile ${OUTFILE}.op.secret /etc/ipsec.d/

    authd installfile open-ipsec.${right}.inc ${IPTABLESDIR}
    authd runscript iptables-update

    if [ "${auto}" = "start" ]; then
        authd runscript op-ipsec ${OUTFILE} up
    fi

    if [ -z ${uuid} ]; then
        exitok
    fi

}
Openswan.update() {
    ipsecconf=ipsec.conf
    ipsecsecrets=ipsec.secrets
    
    listenip=$(coreval Openswan left)

    cat > ${ipsecconf} << _EOF_ 
###
# This file is automatically generated by OpenPanel. Manual changes will be
# overwritten
###

version 2.0

config setup
    dumpdir=/var/run/pluto/
    nat_traversal=no
    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10
    listen=${listenip}
    oe=off
    protostack=auto

include /etc/ipsec.d/*.op.conf

_EOF_

    cat > ${ipsecsecrets} << _EOF_ 
###
# This file is automatically generated by OpenPanel. Manual changes will be
# overwritten
###

include /etc/ipsec.d/*.op.secret

_EOF_
    authd installfile ${ipsecconf} /etc/
    authd installfile ${ipsecsecrets} /etc/

    IPTABLESDIR=/etc/openpanel/iptables.d
    echo '$IPTABLES -t nat -N no-nat-ipsec' > no-nat-ipsec.inc
    echo '$IPTABLES -t nat -I POSTROUTING -j no-nat-ipsec' >> no-nat-ipsec.inc
    echo '$IPTABLES -t nat -A no-nat-ipsec -p esp -j ACCEPT' >> no-nat-ipsec.inc
    echo '$IPTABLES -t nat -A no-nat-ipsec -p udp --dport 500 -j ACCEPT' >> no-nat-ipsec.inc
    echo '$IPTABLES -t nat -A no-nat-ipsec -p udp --dport 4500 -j ACCEPT' >> no-nat-ipsec.inc

    authd installfile no-nat-ipsec.inc ${IPTABLESDIR}
    authd runscript iptables-update

    default_leftsubnet=$(coreval Openswan leftsubnet)

    for uuid in `coreval --loop Openswan Openswan:Connection`; do
        leftsubnet=$(getval leftsubnet ${uuid} | tr '\n' ' ')
        rightip=$(getval id ${uuid})

        if [ "X${leftsubnet}" = "X" ]; then
            Openswan:Connection.update ${uuid}
        fi
    done

    authd reloadservice ipsec

    exitok
}

Module.delete() {
    exitok
}

implement Openswan.module
